name: CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'python-pypi/src/**'
      - 'python-pypi/pyproject.toml'
  pull_request:
    branches: [ main ]
    paths:
      - 'python-pypi/src/**'
      - 'python-pypi/pyproject.toml'

permissions:
  contents: write

jobs:
  ci-version-check:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check version on PyPI
        run: |
          VERSION=$(grep -m1 'version = ' python-pypi/pyproject.toml | cut -d'"' -f2)
          echo "Current version: $VERSION"
          
          RESPONSE=$(curl -s https://pypi.org/pypi/gits-statuses/json || echo '{"releases": {}}')
          if echo "$RESPONSE" | python -c "import sys, json; releases = json.load(sys.stdin)['releases']; sys.exit(0 if '$VERSION' in releases else 1)"; then
            echo "::error::Version $VERSION already exists on PyPI. Please increment the version number."
            exit 1
          else
            echo "Version $VERSION is available for publishing"
          fi

  lint:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      
      - name: Run ruff
        run: |
          uvx ruff check python-pypi/

  unit-tests:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python-pypi
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      
      - name: Pytest
        run: |
          uv venv
          uv run pytest
        env:
          DBT_CLOUD_API_KEY: ${{ secrets.DBT_CLOUD_API_KEY }}
          DBT_CLOUD_ACCOUNT_ID: ${{ secrets.DBT_CLOUD_ACCOUNT_ID }}

  test-build:
    needs: [lint, unit-tests]
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python-pypi
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      
      - name: Test build
        run: |
          uv build

  cd-version-check:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python-pypi
    outputs:
      version_exists: ${{ steps.check_version.outputs.version_exists }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      
      - name: Check version on PyPI
        id: check_version
        run: |
          VERSION=$(grep -m1 'version = ' pyproject.toml | cut -d'"' -f2)
          echo "Current version: $VERSION"
          
          RESPONSE=$(curl -s https://pypi.org/pypi/gits-statuses/json || echo '{"releases": {}}')
          if echo "$RESPONSE" | python -c "import sys, json; releases = json.load(sys.stdin)['releases']; sys.exit(0 if '$VERSION' in releases else 1)"; then
            echo "Version $VERSION already exists on PyPI. Skipping publish and release."
            echo "version_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION is available for publishing"
            echo "version_exists=false" >> $GITHUB_OUTPUT
          fi

  publish:
    needs: cd-version-check
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.cd-version-check.outputs.version_exists == 'false'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python-pypi
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - uses: ./.github/actions/setup
          
      - name: Build and publish
        run: |
          uv build
          uv publish
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.UV_PUBLISH_TOKEN }}

  release:
    needs: [cd-version-check, publish]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.cd-version-check.outputs.version_exists == 'false'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python-pypi
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - uses: ./.github/actions/setup
      
      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(grep -m1 'version = ' pyproject.toml | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build package
        run: |
          uv build

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          generate_release_notes: true
          body: |
            Published to PyPI: https://pypi.org/project/gits-statuses/${{ steps.get_version.outputs.version }}/
          files: |
            python-pypi/dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      